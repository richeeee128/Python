#is 연산자
a = [1,2,3,4,5]
b = a
c = [1,2,3,4,5]

print('[2-1]a is b=', a is b) #True 같은 것을 가리키고 있는가? Yes
print('2-2]a is c=', a is c) #False 같은 것을 가리키고 있지 않다.

print(id(a),id(b),id(c))

#[Summary]
#is 연산자는 데이터 값을 비교하는 게 아니라 같은 객체를 가리키는지를 비교한다.
#그렇기 때문에, 설령 같은 값을 가지고 있다 하더라도 각각 다르게 생성된 객체라면 is연산자로 비교시 false 값을 출력한다.

print('[3-1] a==b', a==b)
print('[3-2] a==c', a==c)
print('[3-3] b==c', b==c)

#[Summary]
# == 연산자는 오브젝트의 데이터 값이 같은지를 확인하고자 할 때 사용한다.